#!/bin/bash
# This script part will be autogenerated when the wrapper starts.  It loads the appropriate variables for the mod script to use.  This is to allow the script to be "installed" to any folder.

# This script needs to be run like this:
# playerDeathLoader.sh "\PATH\TO\SCRIPT\playerDeath.sh" [PlayerName] [deathType] (killer/Entity Responsible) (Entity Responsible)
# Either the killer or entity responsible may or may not be included in the death event, so this script will determine what information was supposed to be where depending on the deathtype
#
# Example: ./playerDeathLoader.sh ~/scripts/wrapper2.0/mods/eventsEngine/playerDeath.sh 11-22-17 5:05pm Benevolent27 player Benevolent27 DestroyerOfWorlds
SAVEIFS=$IFS
my_dir="`( cd \"$MY_PATH\" && pwd )`"
function set_IFS_no_spaces {
	IFS=$(echo -en "\n\b")
}
function reset_IFS {
	IFS=$SAVEIFS
}
function finish {
	echo "Running exit commands.."
	cd $my_dir
	reset_IFS
}
trap finish EXIT


if [ "${2}" ]; then
	starMadeDir=~/starmade/StarMade/
	scriptDir=~/scripts/
	wrapperDir="${scriptDir}wrapper2.0/"

	addIniVariable="${wrapperDir}bin/ini/addIniVariable.sh"
	checkIniIfVariableExists="${wrapperDir}bin/ini/checkIniIfVariableExists.sh"
	getIniValue="${wrapperDir}bin/ini/getIniValue.sh"
	getIniVariables="${wrapperDir}bin/ini/getIniVariables.sh"
	renIniVariable="${wrapperDir}bin/ini/renIniVariable.sh"
	rmIniVariable="${wrapperDir}bin/ini/rmIniVariable.sh"
	setIniVariable="${wrapperDir}bin/ini/setIniVariable.sh"

	melvin_chat="${scriptDir}wrapper/melvin_chat.sh"
	melvin_chat_public="${scriptDir}wrapper/melvin_public_chat.sh"
	server_message_to="${scriptDir}server_message_to.sh"

	# Shows as a red popup
	server_error_to="${scriptDir}server_error_to.sh"
	# Shows as a green popup
	server_info_to="${scriptDir}server_info_to.sh"
	# Shows as a blue popup
	server_warning_to="${scriptDir}server_warning_to.sh"

	echo "#####-newBaseLoader.sh running"
	modsDir="${wrapperDir}mods/"
	scriptCalled="${1}"
	shift
	modFolder="$(echo "${scriptCalled}" | sed -E 's_/[0-9A-Za-z \._-]*$__g')/"
	# echo "ModFolder set: ${modFolder}"
	userFolder="${modFolder}userFiles/"
	# echo "userFolder: ${userFolder}"
	commandsFolder="${modFolder}commands/"
	# echo "commandsFolder: ${commandsFolder}"

	wrapperBinFolder="${wrapperDir}bin/"
	# echo "wrapperBinFolder: ${wrapperBinFolder}"


	binFolder="${modFolder}bin/"
	# echo "binFolder: ${binFolder}"
	name="$1"
	# echo "name: ${name}"
	shift
	echo "# newBaseLoader Values:  name: ${name}"
	# This does not suffice for
	tempCounter=1
	set_IFS_no_spaces
	for b in $@; do
		echo "${tempCounter}: ${b}"
		let tempCounter++
	done
	reset_IFS

	baseName="$1"
	echo "baseName: ${baseName}"
	shift
	toSector="$1"
	# echo "toSector: ${toSector}"
	shift
	bluePrintName="$1"
	echo "bluePrintName: ${bluePrintName}"
	shift
	bluePrintPrice="$1"
	# echo "bluePrintPrice: ${bluePrintPrice}"
	echo "toSector: ${toSector} bluePrintPrice: ${bluePrintPrice}"


	function runScript {
		# This runs the script in-line so that it inherits the variables set above
		echo "Running newBase script: ${scriptCalled}"
		. "${scriptCalled}" "${@}"
	}

	# First check to see if the script is an admin-only script or not, and only run it if the person is an admin if so.
	commandIni="$(echo "${scriptCalled}" | sed 's/\.sh$//g').ini"
	# echo "commandIni: ${commandIni}"

	# This is of questionable utility right now, but there can be an ini set so that it only runs the player death script IF the person who died was an admin - this is a carryover from this script originally being for commands
	isScriptOnlyAdmin="$("${getIniValue}" -quiet "${commandIni}" adminOnly | tr '[:upper:]' '[:lower:]')"
	# echo "isScriptOnlyAdmin: ${isScriptOnlyAdmin}"

	if [ "${isScriptOnlyAdmin}" == "true" ]; then
		isPlayerAdmin=$("${wrapperBinFolder}user/isAdmin.sh" "${name}")
		if [ "${isPlayerAdmin}" == "true" ]; then
			runScript "$@"
		else
			# To do - set up error messaging handling for admin only commands.
			echo "Script set to admin-only and player was not an admin! Doing nothing!"
		fi
	else
		runScript "$@"
	fi
else
	echo 'Usage: newBaseLoader.sh \"\PATH\TO\SCRIPT\newBase.sh\" [PlayerName] ["newBaseName"] ("To Sector") ("BluePrint Name") (price)'

fi
