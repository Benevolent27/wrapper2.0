#!/bin/bash
# This script part will be autogenerated when the wrapper starts.  It loads the appropriate variables for the mod script to use.  This is to allow the script to be "installed" to any folder.

if [ "${1}" == "-debug" ]; then
	debug="true"
	shift
fi

function decho {
	if [ "${debug}" == "true" ]; then
		echo "$@"
	fi
}
function dlog {
	if [ "${debug}" == "true" ]; then
		"${scriptDir}log.sh" "$@"
	fi
}

starMadeDir=~/starmade/StarMade/
scriptDir=~/scripts/
wrapperDir="${scriptDir}wrapper2.0/"

addIniVariable="${scriptDir}core/ini/addIniVariable.sh"
checkIniIfVariableExists="${scriptDir}core/ini/checkIniIfVariableExists.sh"
getIniValue="${scriptDir}core/ini/getIniValue.sh"
getIniVariables="${scriptDir}core/ini/getIniVariables.sh"
renIniVariable="${scriptDir}core/ini/renIniVariable.sh"
rmIniVariable="${scriptDir}core/ini/rmIniVariable.sh"
setIniVariable="${scriptDir}core/ini/setIniVariable.sh"
melvin_chat="${scriptDir}wrapper/melvin_chat.sh"
melvin_chat_public="${scriptDir}wrapper/melvin_public_chat.sh"
server_message_to="${scriptDir}server_message_to.sh"

modsDir="${wrapperDir}mods/"
scriptCalled="${1}"
modFolder="$(echo "${scriptCalled}" | sed -E 's_[cC][oO][mM][mM][aA][nN][dD][sS]/[0-9A-Za-z \._-]*$__g')"
# echo "ModFolder set: ${modFolder}"
userFolder="${modFolder}userFiles/"
if ! [ -d "${userFolder}" ]; then
	mkdir "${userFolder}"
fi
# echo "userFolder: ${userFolder}"
commandsFolder="${modFolder}commands/"
if ! [ -d "${commandsFolder}" ]; then
	mkdir "${commandsFolder}"
fi
# echo "commandsFolder: ${commandsFolder}"

wrapperBinFolder="${wrapperDir}bin/"
# echo "wrapperBinFolder: ${wrapperBinFolder}"
binFolder="${modFolder}bin/"
if ! [ -d "${binFolder}" ]; then
	mkdir "${binFolder}"
fi
# echo "binFolder: ${binFolder}"

shift
everythingElse="${@}"
# echo "everythingElse: ${everythingElse}"
name="${1}"
shift
function runScript {
	# This runs the script in-line so that it inherits the variables set above
	echo "Running CommandScript: ${scriptCalled} ${everythingElse}"
	. "${scriptCalled}" "${@}"
}

# First check to see if the script is an admin-only script or not, and only run it if the person is an admin if so.
commandIni="$(echo "${scriptCalled}" | sed 's/\.sh$//g').ini"
# echo "commandIni: ${commandIni}"

isScriptOnlyAdmin="$("${getIniValue}" -quiet "${commandIni}" adminOnly | tr '[:upper:]' '[:lower:]')"
# echo "isScriptOnlyAdmin: ${isScriptOnlyAdmin}"

if [ "${isScriptOnlyAdmin}" == "true" ]; then
	isPlayerAdmin=$("${wrapperBinFolder}user/isAdmin.sh" "${name}")
	if [ "${isPlayerAdmin}" == "true" ]; then
		runScript "$@"
	else
		# To do - set up error messaging handling for admin only commands.
		# echo "Script set to admin-only and player was not an admin! Doing nothing!"
		"${melvin_chat}" "${name}" "Sorry bub, this is an admin-only command!"
	fi
else
	runScript "$@"
fi
